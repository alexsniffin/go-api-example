// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/alexsniffin/go-api-starter/internal/todo-api/models"
	mock "github.com/stretchr/testify/mock"
)

// TodoStore is an autogenerated mock type for the TodoStore type
type TodoStore struct {
	mock.Mock
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoStore) DeleteTodo(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodo provides a mock function with given fields: ctx, id
func (_m *TodoStore) GetTodo(ctx context.Context, id int) (models.TodoItem, bool, error) {
	ret := _m.Called(ctx, id)

	var r0 models.TodoItem
	if rf, ok := ret.Get(0).(func(context.Context, int) models.TodoItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.TodoItem)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, int) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PostTodo provides a mock function with given fields: ctx, _a1
func (_m *TodoStore) PostTodo(ctx context.Context, _a1 models.TodoItem) (int, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, models.TodoItem) int); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.TodoItem) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
